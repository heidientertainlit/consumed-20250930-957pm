import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '', 
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization') }
        }
      }
    );

    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (req.method === 'GET') {
      // Get comments for a post
      const url = new URL(req.url);
      const post_id = url.searchParams.get('post_id');

      if (!post_id) {
        return new Response(JSON.stringify({ error: 'Missing post_id' }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      // Use service role for better access without joins to avoid cache issues
      const serviceSupabase = createClient(
        Deno.env.get('SUPABASE_URL') ?? '', 
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '', 
      );

      const { data: comments, error } = await serviceSupabase
        .from('social_post_comments')
        .select('id, content, created_at, user_id')
        .eq('post_id', post_id)
        .order('created_at', { ascending: true });

      if (error) {
        console.log('Comments fetch error:', error);
        return new Response(JSON.stringify({ error: error.message }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      // Get user data separately to avoid join issues
      const userIds = [...new Set(comments?.map(comment => comment.user_id) || [])];
      const { data: users } = await serviceSupabase
        .from('users')
        .select('id, user_name, email')
        .in('id', userIds);

      const userMap = new Map(users?.map(user => [user.id, user]) || []);

      const transformedComments = comments?.map(comment => ({
        ...comment,
        username: userMap.get(comment.user_id)?.user_name || 
                 userMap.get(comment.user_id)?.email?.split('@')[0] || 
                 'Unknown'
      }));

      return new Response(JSON.stringify({ comments: transformedComments }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (req.method === 'POST') {
      // Add a comment
      const body = await req.json();
      const { post_id, content } = body;

      if (!post_id || !content) {
        return new Response(JSON.stringify({ error: 'Missing post_id or content' }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      // Use service role for insert without joins to avoid cache issues
      const serviceSupabase = createClient(
        Deno.env.get('SUPABASE_URL') ?? '', 
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '', 
      );

      const { data: comment, error } = await serviceSupabase
        .from('social_post_comments')
        .insert({
          post_id,
          user_id: user.id,
          content
        })
        .select('id, content, created_at, user_id')
        .single();

      if (error) {
        console.log('Comment insert error:', error);
        return new Response(JSON.stringify({ error: error.message }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      // Get user info for the comment
      const { data: commentUser } = await serviceSupabase
        .from('users')
        .select('user_name, email')
        .eq('id', user.id)
        .single();

      const transformedComment = {
        ...comment,
        username: commentUser?.user_name || 
                 commentUser?.email?.split('@')[0] || 
                 'Unknown'
      };

      return new Response(JSON.stringify({ comment: transformedComment }), {
        status: 201,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

  } catch (error) {
    console.log('Comments function error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});