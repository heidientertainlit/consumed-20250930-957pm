import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '', 
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization') }
        }
      }
    );

    const { data: { user }, error: userError } = await supabase.auth.getUser();
    if (userError || !user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Use service role to bypass cache issues
    const serviceSupabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '', 
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '', 
    );

    if (req.method === 'GET') {
      // Get comments for a post using raw SQL
      const url = new URL(req.url);
      const post_id = url.searchParams.get('post_id');

      if (!post_id) {
        return new Response(JSON.stringify({ error: 'Missing post_id' }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      // Use raw SQL to completely bypass schema cache
      const { data: comments, error } = await serviceSupabase.rpc('exec_sql', {
        query: `
          SELECT 
            c.id, 
            c.content, 
            c.created_at, 
            c.user_id,
            COALESCE(u.user_name, SPLIT_PART(u.email, '@', 1), 'Unknown') as username
          FROM social_post_comments c
          LEFT JOIN users u ON c.user_id = u.id
          WHERE c.post_id = $1
          ORDER BY c.created_at ASC
        `,
        params: [post_id]
      });

      if (error) {
        console.log('Comments fetch error:', error);
        return new Response(JSON.stringify({ error: error.message }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      return new Response(JSON.stringify({ comments: comments || [] }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (req.method === 'POST') {
      // Add a comment using raw SQL
      const body = await req.json();
      const { post_id, content } = body;

      if (!post_id || !content) {
        return new Response(JSON.stringify({ error: 'Missing post_id or content' }), {
          status: 400,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      // Generate ID and insert using raw SQL to bypass cache
      const commentId = crypto.randomUUID();
      
      const { data: result, error } = await serviceSupabase.rpc('exec_sql', {
        query: `
          INSERT INTO social_post_comments (id, post_id, user_id, content, created_at)
          VALUES ($1, $2, $3, $4, NOW())
          RETURNING 
            id, 
            content, 
            created_at, 
            user_id,
            (SELECT COALESCE(user_name, SPLIT_PART(email, '@', 1), 'Unknown') 
             FROM users WHERE id = $3) as username
        `,
        params: [commentId, post_id, user.id, content]
      });

      if (error) {
        console.log('Comment insert error:', error);
        return new Response(JSON.stringify({ error: error.message }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      const comment = result && result.length > 0 ? result[0] : null;

      if (!comment) {
        return new Response(JSON.stringify({ error: 'Failed to create comment' }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }

      return new Response(JSON.stringify({ comment }), {
        status: 201,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

  } catch (error) {
    console.log('Comments function error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});